# Default values for healthchecker.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository:  hemantdua/k8s-service-healthchecker
  pullPolicy: Always
  # Overrides the image tag whose default is the chart version.
  backendTag: backend-1.0
  frontendTag: frontend-1.0

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8000

ingress:
  enabled: true
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: <DASHBOARD ENDPOINT>
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

namespace: "<NAMESPACE>"  # Namespace in Which you want to deploy the healthchecker

config: |
    namespace: "$NAMESPACE"  
    smtpUser: "<SMTP USER>"  # SMTP user for Alerts
    smtpPass: "<SMTP PASSWORD>"  
    sender: "alerts@heal.com"
    recipientList: [mail@xyz.com,test@gmail.com]
    dashboardEndpoint: "<DASHBOARD ENDPOINT>"   # The Dashboard endpoint From where you will be accessing the UI
    alert: true                     # Default Alerts are disable i.e false
    initialCycle: 90                 # After initialCycle number of cycle the dashboard will through the alert
    microservice:
      - service: "nginx"              # Service details which you want to monitor
        port: 80
        context_path: "" #No need to add /abc 
        path: "/"h"
             